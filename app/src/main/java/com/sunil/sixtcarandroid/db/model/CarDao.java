package com.sunil.sixtcarandroid.db.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR".
*/
public class CarDao extends AbstractDao<Car, Long> {

    public static final String TABLENAME = "CAR";

    /**
     * Properties of entity Car.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Car_id = new Property(1, String.class, "car_id", false, "CAR_ID");
        public final static Property ModelIdentifier = new Property(2, String.class, "modelIdentifier", false, "MODEL_IDENTIFIER");
        public final static Property ModelName = new Property(3, String.class, "modelName", false, "MODEL_NAME");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property Make = new Property(5, String.class, "make", false, "MAKE");
        public final static Property Group = new Property(6, String.class, "group", false, "GROUP");
        public final static Property Series = new Property(7, String.class, "series", false, "SERIES");
        public final static Property Color = new Property(8, String.class, "color", false, "COLOR");
        public final static Property FuelType = new Property(9, String.class, "fuelType", false, "FUEL_TYPE");
        public final static Property FuelLevel = new Property(10, Double.class, "fuelLevel", false, "FUEL_LEVEL");
        public final static Property Transmission = new Property(11, String.class, "transmission", false, "TRANSMISSION");
        public final static Property LicensePlate = new Property(12, String.class, "licensePlate", false, "LICENSE_PLATE");
        public final static Property Latitude = new Property(13, Double.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(14, Double.class, "longitude", false, "LONGITUDE");
        public final static Property InnerCleanliness = new Property(15, String.class, "innerCleanliness", false, "INNER_CLEANLINESS");
        public final static Property CarImageUrl = new Property(16, String.class, "carImageUrl", false, "CAR_IMAGE_URL");
    }


    public CarDao(DaoConfig config) {
        super(config);
    }
    
    public CarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CAR_ID\" TEXT NOT NULL ," + // 1: car_id
                "\"MODEL_IDENTIFIER\" TEXT," + // 2: modelIdentifier
                "\"MODEL_NAME\" TEXT," + // 3: modelName
                "\"NAME\" TEXT," + // 4: name
                "\"MAKE\" TEXT," + // 5: make
                "\"GROUP\" TEXT," + // 6: group
                "\"SERIES\" TEXT," + // 7: series
                "\"COLOR\" TEXT," + // 8: color
                "\"FUEL_TYPE\" TEXT," + // 9: fuelType
                "\"FUEL_LEVEL\" REAL," + // 10: fuelLevel
                "\"TRANSMISSION\" TEXT," + // 11: transmission
                "\"LICENSE_PLATE\" TEXT," + // 12: licensePlate
                "\"LATITUDE\" REAL," + // 13: latitude
                "\"LONGITUDE\" REAL," + // 14: longitude
                "\"INNER_CLEANLINESS\" TEXT," + // 15: innerCleanliness
                "\"CAR_IMAGE_URL\" TEXT);"); // 16: carImageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Car entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCar_id());
 
        String modelIdentifier = entity.getModelIdentifier();
        if (modelIdentifier != null) {
            stmt.bindString(3, modelIdentifier);
        }
 
        String modelName = entity.getModelName();
        if (modelName != null) {
            stmt.bindString(4, modelName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String make = entity.getMake();
        if (make != null) {
            stmt.bindString(6, make);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(7, group);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(8, series);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(9, color);
        }
 
        String fuelType = entity.getFuelType();
        if (fuelType != null) {
            stmt.bindString(10, fuelType);
        }
 
        Double fuelLevel = entity.getFuelLevel();
        if (fuelLevel != null) {
            stmt.bindDouble(11, fuelLevel);
        }
 
        String transmission = entity.getTransmission();
        if (transmission != null) {
            stmt.bindString(12, transmission);
        }
 
        String licensePlate = entity.getLicensePlate();
        if (licensePlate != null) {
            stmt.bindString(13, licensePlate);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(14, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(15, longitude);
        }
 
        String innerCleanliness = entity.getInnerCleanliness();
        if (innerCleanliness != null) {
            stmt.bindString(16, innerCleanliness);
        }
 
        String carImageUrl = entity.getCarImageUrl();
        if (carImageUrl != null) {
            stmt.bindString(17, carImageUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Car entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getCar_id());
 
        String modelIdentifier = entity.getModelIdentifier();
        if (modelIdentifier != null) {
            stmt.bindString(3, modelIdentifier);
        }
 
        String modelName = entity.getModelName();
        if (modelName != null) {
            stmt.bindString(4, modelName);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String make = entity.getMake();
        if (make != null) {
            stmt.bindString(6, make);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(7, group);
        }
 
        String series = entity.getSeries();
        if (series != null) {
            stmt.bindString(8, series);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(9, color);
        }
 
        String fuelType = entity.getFuelType();
        if (fuelType != null) {
            stmt.bindString(10, fuelType);
        }
 
        Double fuelLevel = entity.getFuelLevel();
        if (fuelLevel != null) {
            stmt.bindDouble(11, fuelLevel);
        }
 
        String transmission = entity.getTransmission();
        if (transmission != null) {
            stmt.bindString(12, transmission);
        }
 
        String licensePlate = entity.getLicensePlate();
        if (licensePlate != null) {
            stmt.bindString(13, licensePlate);
        }
 
        Double latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindDouble(14, latitude);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(15, longitude);
        }
 
        String innerCleanliness = entity.getInnerCleanliness();
        if (innerCleanliness != null) {
            stmt.bindString(16, innerCleanliness);
        }
 
        String carImageUrl = entity.getCarImageUrl();
        if (carImageUrl != null) {
            stmt.bindString(17, carImageUrl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Car readEntity(Cursor cursor, int offset) {
        Car entity = new Car( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // car_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // modelIdentifier
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // modelName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // make
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // group
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // series
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // color
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // fuelType
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // fuelLevel
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // transmission
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // licensePlate
            cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13), // latitude
            cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14), // longitude
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // innerCleanliness
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // carImageUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Car entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCar_id(cursor.getString(offset + 1));
        entity.setModelIdentifier(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModelName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMake(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGroup(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSeries(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setColor(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFuelType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFuelLevel(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setTransmission(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLicensePlate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLatitude(cursor.isNull(offset + 13) ? null : cursor.getDouble(offset + 13));
        entity.setLongitude(cursor.isNull(offset + 14) ? null : cursor.getDouble(offset + 14));
        entity.setInnerCleanliness(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCarImageUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Car entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Car entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Car entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
